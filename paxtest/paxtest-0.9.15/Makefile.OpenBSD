#!/usr/bin/gmake

CC=gcc
CFLAGS=
LDFLAGS=
ifndef RUNDIR
RUNDIR=.
endif

CFLAGS+=-O2 -DRUNDIR=\"${RUNDIR}\" -fno-stack-protector -ftrampolines
LDFLAGS+=-lpthread


TESTS=	anonmap \
	execbss \
	execdata \
	execheap \
	execstack \
	mprotanon \
	mprotbss \
	mprotdata \
	mprotheap \
	mprotshbss \
	mprotshdata \
	mprotstack \
	randamap \
	randheap1 \
	randmain1 \
	randshlib \
	randstack1 \
	randstack2 \
	randarg1 \
	randarg2 \
	rettofunc1 \
	rettofunc1x \
	rettofunc2 \
	rettofunc2x \
	shlibbss \
	shlibdata \
	writetext

UTILS=	getamap \
	getheap1 \
	getheap2 \
	getmain1 \
	getmain2 \
	getshlib \
	getstack1 \
	getstack2 \
	getarg1 \
	getarg2

SHLIBS=	shlibtest.so \
	shlibtest2.so

all: $(SHLIBS) $(TESTS) $(UTILS) paxtest

clean:
	-rm -f *.o *.s *~ core
	-rm -f $(SHLIBS) $(TESTS) $(UTILS)
	-rm -f paxtest paxtest.log a.out

ifdef DESTDIR
ifdef BINDIR
ifdef RUNDIR
install: all
	mkdir -p $(DESTDIR)/$(RUNDIR)
	cp $(SHLIBS) $(TESTS) $(UTILS) $(DESTDIR)/$(RUNDIR)
	mkdir -p $(DESTDIR)/$(BINDIR)
	cp paxtest $(DESTDIR)/$(BINDIR)
	chmod 755 $(DESTDIR)/$(BINDIR)/paxtest
endif
endif
endif

paxtest: $(TESTS) genpaxtest
	sh genpaxtest $(CC) $(TESTS)

anonmap: body.o anonmap.o

execbss: body.o execbss.o

execdata: body.o execdata.o

execheap: body.o execheap.o

execstack: body.o execstack.o

getheap1: getheap.o
	$(CC) $(LDFLAGS) -o $@ $+

getheap2: getheap.o
	$(CC) -shared -o $@ $+

getheap.o: getheap.c
	$(CC) $(CFLAGS) -fPIC -o $@ -c $<

getamap.o: getamap.c

getmain1: getmain.o
	$(CC) $(LDFLAGS) -o $@ $+

getmain2: getmain2.o
	$(CC) -shared -o $@ $+

getmain2.o: getmain.c
	$(CC) $(CFLAGS) -fPIC -o $@ -c $<

getshlib: getshlib.o

getstack1: getstack.o
	$(CC) $(LDFLAGS) -o $@ $+

getstack2: getstack1
	rm -f $@
	cp getstack1 $@
	chmod +x $@

getarg1: getarg.o
	$(CC) $(LDFLAGS) -o $@ $+

getarg2: getarg1
	rm -f $@
	cp getarg1 $@
	chmod +x $@

mprotanon: body.o mprotanon.o

mprotbss: body.o mprotbss.o

mprotheap: body.o mprotheap.o

mprotdata: body.o mprotdata.o

mprotshbss: body.o mprotshbss.o shlibtest.so

mprotshdata: body.o mprotshdata.o shlibtest.so

mprotstack: body.o mprotstack.o

randamap: randbody.o randamap.o

randheap1: randbody.o randheap1.o

randheap2: randbody.o randheap2.o

randmain1: randbody.o randmain1.o

randmain2: randbody.o randmain2.o

randshlib: randbody.o randshlib.o

randstack1: randbody.o randstack1.o

randstack2: randbody.o randstack2.o

rettofunc1: body.o rettofunc1.o

rettofunc1x: body.o rettofunc1x.o
	$(CC) $(LDFLAGS) -o $@ $+

rettofunc2: body.o rettofunc2.o

rettofunc2x: body.o rettofunc2x.o
	$(CC) $(LDFLAGS) -o $@ $+

shlibtest.o: shlibtest.c
	$(CC) $(CFLAGS) -fPIC -c $< -o $@

shlibtest2.o: shlibtest2.c
	$(CC) $(CFLAGS) -fPIC -c $< -o $@

shlibtest.so: shlibtest.o
	$(CC) $(SHLDFLAGS) -shared -o $@ $+

shlibtest2.so: shlibtest2.o
	$(CC) $(SHLDFLAGS) -shared -o $@ $+

shlibbss: body.o shlibbss.o shlibtest.so shlibtest2.so

shlibdata: body.o shlibdata.o shlibtest.so shlibtest2.so

writetext: body.o writetext.o shlibtest.so

